{{range .Types}}{{$addType := .Schema.AdditionalPropertiesType.TypeDecl}}

// Returns the additional properties dict
func (a {{.TypeName}}) AdditionalProperties() map[string]{{$addType}} {
    return a.additionalProperties
}

// Getter for additional properties for {{.TypeName}}. Returns the specified
// element and whether it was found
func (a {{.TypeName}}) Get(fieldName string) (value {{$addType}}, found bool) {
    if a.additionalProperties != nil {
        value, found = a.additionalProperties[fieldName]
    }
    return
}

// Setter for additional properties for {{.TypeName}}
func (a *{{.TypeName}}) Set(fieldName string, value {{$addType}}) {
    if a.additionalProperties == nil {
        a.additionalProperties = make(map[string]{{$addType}})
    }
    a.additionalProperties[fieldName] = value
}

// Override default JSON handling for {{.TypeName}} to handle additionalProperties
func (a *{{.TypeName}}) UnmarshalJSON(b []byte) error {
    object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}
{{range .Schema.Properties}}
    if raw, found := object["{{.JsonFieldName}}"]; found {
        err = json.Unmarshal(raw, &a.{{.GoFieldName}})
        if err != nil {
            return errors.Wrap(err, "error reading '{{.JsonFieldName}}'")
        }
        delete(object, "{{.JsonFieldName}}")
    }
{{end}}
    a.additionalProperties = make(map[string]{{$addType}})
    for fieldName, fieldBuf := range object {
        var fieldVal {{$addType}}
        err := json.Unmarshal(fieldBuf, &fieldVal)
        if err != nil {
            return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
        }
        a.additionalProperties[fieldName] = fieldVal
    }
	return nil
}

// Override default JSON handling for {{.TypeName}} to handle additionalProperties
func (a {{.TypeName}}) MarshalJSON() ([]byte, error) {
    var err error
    object := make(map[string]json.RawMessage)
{{range .Schema.Properties}}
{{if not .Required}}if a.{{.GoFieldName}} != nil { {{end}}
    object["{{.JsonFieldName}}"], err = json.Marshal(a.{{.GoFieldName}})
    if err != nil {
        return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '{{.JsonFieldName}}'"))
    }
{{if not .Required}} }{{end}}
{{end}}
    for fieldName, field := range a.additionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
{{end}}
